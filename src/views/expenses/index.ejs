<!-- Page Header -->
<div class="page-header">
  <div>
    <h1 class="page-title">Expenses</h1>
    <p class="page-description">Track and manage all operational expenses and costs.</p>
  </div>
</div>

<!-- Expenses Table -->
<div class="table-container">
  <div class="table-card">
    <div class="table-header">
      <div class="table-title">
        <h3>Expense Management</h3>
        <span class="table-subtitle">All operational expenses and cost records</span>
      </div>
      <div class="table-actions">
        <button class="btn btn-primary" id="addExpenseBtn">
          <i class="bi bi-plus-lg"></i>
          Add Expense
        </button>
      </div>
    </div>
    
    <div class="table-wrapper">
      <table class="expenses-table">
        <thead>
          <tr>
            <th class="checkbox-col">
              <input type="checkbox" class="form-check-input" id="selectAll">
            </th>
            <th class="sortable">
              TYPE
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              SUBTYPE
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              PLACE
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              AMOUNT
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              CURRENCY
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              PERIOD
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              FUEL QTY
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              FUEL PROV.
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              INV. TYPE
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              INV. #
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              FLT. #
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              INV. ID
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              FLT. ID
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th class="sortable">
              COMMENTS
              <i class="bi bi-chevron-down sort-icon"></i>
            </th>
            <th>ACTIONS</th>
          </tr>
        </thead>
        <tbody id="expenses-table-body">
          <!-- Data will be loaded via JavaScript -->
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Add Expense Modal -->
<div class="modal-overlay" id="addExpenseModal" style="display: none;">
  <div class="modal-container">
    <div class="modal-header">
      <h2>Add New Expense</h2>
      <button class="modal-close" id="closeExpenseModalBtn">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    
    <form id="addExpenseForm">
      <div class="modal-body">
        <div class="form-row">
          <div class="form-group">
            <label for="expType">Type</label>
            <select id="expType" name="exp_type" required>
              <option value="">Select Type</option>
            </select>
          </div>
          <div class="form-group">
            <label for="expSubtype">Subtype</label>
            <select id="expSubtype" name="exp_subtype">
              <option value="">Select Subtype</option>
            </select>
          </div>
          <div class="form-group">
            <label for="expPlace">Place</label>
            <input type="text" id="expPlace" name="exp_place" placeholder="Enter place">
          </div>
        </div>
        
                       <div class="form-row">
                         <div class="form-group">
                           <label for="expAmount">Amount</label>
                           <input type="number" id="expAmount" name="exp_amount" step="0.01" placeholder="0.00">
                         </div>
                         <div class="form-group">
                           <label for="expCurrency">Currency</label>
                           <select id="expCurrency" name="exp_currency">
                             <option value="AED" selected>AED</option>
                             <option value="USD">USD</option>
                             <option value="EUR">EUR</option>
                           </select>
                         </div>
                       </div>
                       <div class="form-row">
                         <div class="form-group">
                           <label for="expFuelQuan">Fuel Quantity (L)</label>
                           <input type="number" id="expFuelQuan" name="exp_fuel_quan" step="0.01" placeholder="0.00">
                         </div>
                         <div class="form-group">
                           <label for="expFuelProvider">Fuel Provider</label>
                           <input type="text" id="expFuelProvider" name="exp_fuel_provider" placeholder="Enter fuel provider">
                         </div>
                       </div>
                       <div class="form-row">
                         <div class="form-group">
                           <label for="expInvoiceType">Invoice Type</label>
                           <select id="expInvoiceType" name="exp_invoice_type">
                             <option value="">Select Invoice Type</option>
                           </select>
                         </div>
                         <div class="form-group">
                           <label for="expPeriodStart">Period Start</label>
                           <input type="month" id="expPeriodStart" name="exp_period_start">
                         </div>
                       </div>
                       <div class="form-row">
                         <div class="form-group">
                           <label for="expPeriodEnd">Period End</label>
                           <input type="month" id="expPeriodEnd" name="exp_period_end">
                         </div>
                         <div class="form-group">
                           <!-- Empty div for spacing -->
                         </div>
                       </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="expInvoice">Invoice</label>
            <select id="expInvoice" name="exp_invoice">
              <option value="">Select Invoice (Optional)</option>
            </select>
          </div>
          <div class="form-group">
            <label for="expFlight">Flight</label>
            <select id="expFlight" name="exp_flight">
              <option value="">Select Flight (Optional)</option>
            </select>
          </div>
        </div>
        
        <div class="form-group">
          <label for="expComments">Comments</label>
          <textarea id="expComments" name="exp_comments" rows="3" placeholder="Enter comments (optional)"></textarea>
        </div>
      </div>
      
      <div class="modal-actions">
        <button type="button" class="btn btn-cancel" id="cancelExpenseBtn">
          Cancel
        </button>
        <button type="submit" class="btn btn-save" id="saveExpenseBtn">
          <span class="btn-text">Save</span>
          <span class="btn-spinner" style="display: none;">
            <i class="bi bi-arrow-clockwise"></i>
          </span>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
// Load expenses data from API
async function loadExpenses() {
  try {
    console.log('Loading expenses...');
    const response = await fetch('/api/expenses');
    console.log('Response status:', response.status);
    const expenses = await response.json();
    console.log('Expenses loaded:', expenses.length);
    console.log('Expenses data:', expenses);
    
    if (!Array.isArray(expenses)) {
      throw new Error('Expenses data is not an array');
    }
    
    const tbody = document.getElementById('expenses-table-body');
    console.log('Table body element:', tbody);
    if (!tbody) {
      throw new Error('Table body element not found');
    }
    tbody.innerHTML = '';
    
    expenses.forEach(expense => {
      const row = document.createElement('tr');
      
      // Format amount with currency (assuming USD for now)
      const formattedAmount = expense.exp_amount ? `$${parseFloat(expense.exp_amount).toLocaleString('en-US', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      })}` : 'N/A';
      
      // Truncate comments if too long
      const truncatedComments = expense.exp_comments && expense.exp_comments.length > 50 
        ? expense.exp_comments.substring(0, 50) + '...' 
        : expense.exp_comments || 'No comments';
      
      // Format fuel quantity
      const fuelQuantity = expense.exp_fuel_quan ? `${expense.exp_fuel_quan} L` : 'N/A';
      
      // Format fuel provider
      const fuelProvider = expense.exp_fuel_provider || 'N/A';
      
      row.innerHTML = `
        <td class="checkbox-col">
          <input type="checkbox" class="form-check-input">
        </td>
        <td>
          <div class="expense-type-compact">${expense.exp_type || 'N/A'}</div>
        </td>
        <td>
          <div class="expense-subtype-compact">${expense.exp_subtype || 'N/A'}</div>
        </td>
        <td>
          <div class="expense-place-compact">${expense.exp_place || 'N/A'}</div>
        </td>
        <td>
          <div class="amount-compact">${formattedAmount}</div>
        </td>
        <td>
          <div class="currency-compact">${expense.exp_currency || 'N/A'}</div>
        </td>
        <td>
          <div class="period-compact">${formatPeriod(expense.exp_period_start, expense.exp_period_end)}</div>
        </td>
        <td>
          <div class="fuel-quantity-compact">${fuelQuantity}</div>
        </td>
        <td>
          <div class="fuel-provider-compact">${fuelProvider}</div>
        </td>
        <td>
          <div class="invoice-type-compact" title="${expense.exp_invoice_type || 'N/A'}">${expense.exp_invoice_type && expense.exp_invoice_type.length > 15 ? expense.exp_invoice_type.substring(0, 15) + '...' : (expense.exp_invoice_type || 'N/A')}</div>
        </td>
        <td>
          <div class="invoice-number-compact">${expense.invoices?.inv_number || 'N/A'}</div>
        </td>
        <td>
          <div class="flight-number-compact">${expense.flights?.flt_number || 'N/A'}</div>
        </td>
        <td>
          <div class="invoice-id-compact" title="${expense.exp_invoice || 'No invoice'}">${expense.exp_invoice ? expense.exp_invoice.substring(0, 8) + '...' : 'N/A'}</div>
        </td>
        <td>
          <div class="flight-id-compact" title="${expense.exp_flight || 'No flight'}">${expense.exp_flight ? expense.exp_flight.substring(0, 8) + '...' : 'N/A'}</div>
        </td>
        <td>
          <div class="comments-compact" title="${expense.exp_comments || 'No comments'}">${truncatedComments}</div>
        </td>
        <td>
          <div class="action-buttons">
            <button class="btn-action" title="View Details" onclick="viewExpense('${expense.id}')">
              <i class="bi bi-eye"></i>
            </button>
            <button class="btn-action" title="Edit" onclick="editExpense('${expense.id}')">
              <i class="bi bi-pencil"></i>
            </button>
            <button class="btn-action" title="Delete" onclick="deleteExpense('${expense.id}')">
              <i class="bi bi-trash"></i>
            </button>
          </div>
        </td>
      `;
      
      tbody.appendChild(row);
    });
  } catch (error) {
    console.error('Error loading expenses:', error);
    console.error('Error details:', error.message, error.stack);
    // Show error message
    const tbody = document.getElementById('expenses-table-body');
    tbody.innerHTML = `
      <tr>
        <td colspan="15" style="text-align: center; padding: 2rem; color: #6b7280;">
          <i class="bi bi-exclamation-triangle" style="font-size: 2rem; margin-bottom: 1rem; display: block;"></i>
          Failed to load expenses. Please try again.
          <br><small>Error: ${error.message}</small>
        </td>
      </tr>
    `;
  }
}

// Format period display
function formatPeriod(startDate, endDate) {
  if (!startDate || !endDate) {
    return 'N/A';
  }
  
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  // Format start date
  const startFormatted = start.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'short' 
  });
  
  // Format end date
  const endFormatted = end.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'short' 
  });
  
  // Check if it's a single month
  const startMonth = start.getMonth();
  const endMonth = end.getMonth();
  const startYear = start.getFullYear();
  const endYear = end.getFullYear();
  
  // If end is the next month after start, it's a single month
  if (endYear === startYear && endMonth === (startMonth + 1) % 12) {
    return startFormatted;
  }
  
  // If end is January of next year and start is December, it's a single month
  if (endYear === startYear + 1 && endMonth === 0 && startMonth === 11) {
    return startFormatted;
  }
  
  // Otherwise, show range
  return `${startFormatted} - ${endFormatted}`;
}

// Load expense types for dropdown
async function loadExpenseTypes() {
  try {
    const response = await fetch('/api/expense-types');
    const types = await response.json();
    
    const select = document.getElementById('expType');
    select.innerHTML = '<option value="">Select Type</option>';
    
    types.forEach(type => {
      const option = document.createElement('option');
      option.value = type.id;
      option.textContent = type.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading expense types:', error);
  }
}

// Load expense subtypes based on selected type
async function loadExpenseSubtypes(typeId) {
  try {
    const select = document.getElementById('expSubtype');
    select.innerHTML = '<option value="">Select Subtype</option>';
    
    if (!typeId) {
      return;
    }
    
    const response = await fetch(`/api/expense-subtypes/${typeId}`);
    const subtypes = await response.json();
    
    subtypes.forEach(subtype => {
      const option = document.createElement('option');
      option.value = subtype.id;
      option.textContent = subtype.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading expense subtypes:', error);
  }
}

// Load invoice types for dropdown
async function loadInvoiceTypes() {
  try {
    const response = await fetch('/api/invoice-types');
    const types = await response.json();
    
    const select = document.getElementById('expInvoiceType');
    select.innerHTML = '<option value="">Select Invoice Type</option>';
    
    types.forEach(type => {
      const option = document.createElement('option');
      option.value = type.id;
      option.textContent = type.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading invoice types:', error);
  }
}

// Load invoices for dropdown
async function loadInvoicesForDropdown() {
  try {
    const response = await fetch('/api/invoices');
    const invoices = await response.json();
    
    const select = document.getElementById('expInvoice');
    select.innerHTML = '<option value="">Select Invoice (Optional)</option>';
    
    invoices.forEach(invoice => {
      const option = document.createElement('option');
      option.value = invoice.id;
      option.textContent = `${invoice.inv_number} - ${new Date(invoice.inv_date).toLocaleDateString()}`;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading invoices for dropdown:', error);
  }
}

// Load flights for dropdown
async function loadFlightsForDropdown() {
  try {
    const response = await fetch('/api/flights');
    const flights = await response.json();
    
    const select = document.getElementById('expFlight');
    select.innerHTML = '<option value="">Select Flight (Optional)</option>';
    
    flights.forEach(flight => {
      const option = document.createElement('option');
      option.value = flight.id;
      option.textContent = `${flight.flt_number} - ${flight.flt_dep} to ${flight.flt_arr} (${new Date(flight.flt_date).toLocaleDateString()})`;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading flights for dropdown:', error);
  }
}

// Modal functions
function openAddExpenseModal() {
  const modal = document.getElementById('addExpenseModal');
  if (modal) {
    modal.classList.add('show');
    // Load dropdowns when modal opens
    loadExpenseTypes();
    loadInvoiceTypes();
    loadInvoicesForDropdown();
    loadFlightsForDropdown();
  }
}

function closeAddExpenseModal() {
  const modal = document.getElementById('addExpenseModal');
  if (modal) {
    modal.classList.remove('show');
    // Reset form
    document.getElementById('addExpenseForm').reset();
    
    // Reset button state
    const saveBtn = document.getElementById('saveExpenseBtn');
    if (saveBtn) {
      const btnText = saveBtn.querySelector('.btn-text');
      const btnSpinner = saveBtn.querySelector('.btn-spinner');
      
      saveBtn.disabled = false;
      if (btnText) btnText.style.display = 'inline';
      if (btnSpinner) btnSpinner.style.display = 'none';
    }
  }
}

// Action functions
function viewExpense(id) {
  console.log('View expense:', id);
  // TODO: Implement view functionality
}

function editExpense(id) {
  console.log('Edit expense:', id);
  // TODO: Implement edit functionality
}

function deleteExpense(id) {
  console.log('Delete expense:', id);
  // TODO: Implement delete functionality
}

// Load data when page loads
document.addEventListener('DOMContentLoaded', function() {
  loadExpenses();
  
  // Add event listeners for modal buttons
  const addExpenseBtn = document.getElementById('addExpenseBtn');
  if (addExpenseBtn) {
    addExpenseBtn.addEventListener('click', openAddExpenseModal);
  }
  
  // Expense type change handler
  const expTypeSelect = document.getElementById('expType');
  if (expTypeSelect) {
    expTypeSelect.addEventListener('change', function() {
      loadExpenseSubtypes(this.value);
    });
  }
  
  const closeModalBtn = document.getElementById('closeExpenseModalBtn');
  if (closeModalBtn) {
    closeModalBtn.addEventListener('click', closeAddExpenseModal);
  }
  
  const cancelBtn = document.getElementById('cancelExpenseBtn');
  if (cancelBtn) {
    cancelBtn.addEventListener('click', closeAddExpenseModal);
  }
  
  // Handle form submission
  const addExpenseForm = document.getElementById('addExpenseForm');
  if (addExpenseForm) {
    addExpenseForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const saveBtn = document.getElementById('saveExpenseBtn');
      const btnText = saveBtn.querySelector('.btn-text');
      const btnSpinner = saveBtn.querySelector('.btn-spinner');
      
      // Show spinner
      btnText.style.display = 'none';
      btnSpinner.style.display = 'inline-block';
      saveBtn.disabled = true;
      
      try {
        const formData = new FormData(addExpenseForm);
        const data = Object.fromEntries(formData.entries());
        
        // Currency field is now stored in database, so keep it
        
        // Convert empty strings to null for optional fields
        Object.keys(data).forEach(key => {
          if (data[key] === '') {
            data[key] = null;
          }
        });
        
        const response = await fetch('/api/expenses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        
        if (response.ok) {
          // Close modal and reload expenses
          closeAddExpenseModal();
          await loadExpenses();
          console.log('Expense added successfully');
        } else {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to add expense');
        }
      } catch (error) {
        console.error('Error adding expense:', error);
        alert('Failed to add expense: ' + error.message);
      } finally {
        // Hide spinner
        btnText.style.display = 'inline';
        btnSpinner.style.display = 'none';
        saveBtn.disabled = false;
      }
    });
  }
  
  // Close modal when clicking outside
  const addExpenseModal = document.getElementById('addExpenseModal');
  if (addExpenseModal) {
    addExpenseModal.addEventListener('click', function(e) {
      if (e.target === this) {
        closeAddExpenseModal();
      }
    });
  }
});
</script>

<style>
/* Expense-specific styles */
.expenses-table {
  width: 100% !important;
  border-collapse: collapse !important;
  font-size: 0.8rem !important;
  table-layout: fixed !important;
}

.expenses-table thead {
  background-color: hsl(210, 11%, 96%) !important;
}

.expenses-table th {
  padding: 0.5rem 0.5rem !important;
  text-align: left !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  border-bottom: 1px solid hsl(210, 11%, 90%) !important;
  white-space: nowrap !important;
  font-size: 0.75rem !important;
}

.expenses-table td {
  padding: 0.5rem 0.5rem !important;
  border-bottom: 1px solid hsl(210, 11%, 90%) !important;
  vertical-align: middle !important;
}

.expenses-table tbody tr:hover {
  background-color: hsl(210, 11%, 98%) !important;
}

.expense-type {
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  text-transform: capitalize !important;
}

.expense-place {
  font-weight: 500 !important;
  color: hsl(210, 6%, 21%) !important;
}

.amount-info {
  display: flex !important;
  flex-direction: column !important;
}

.amount-main {
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  margin-bottom: 0.125rem !important;
}

.amount-details {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
}

.invoice-type-info {
  display: flex !important;
  flex-direction: column !important;
}

.invoice-type-main {
  font-weight: 500 !important;
  color: hsl(210, 6%, 21%) !important;
  margin-bottom: 0.125rem !important;
  font-size: 0.8rem !important;
}

.invoice-type-details {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
}

.invoice-number-info {
  display: flex !important;
  flex-direction: column !important;
}

.invoice-number-main {
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  margin-bottom: 0.125rem !important;
}

.invoice-number-details {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
}

.flight-number-info {
  display: flex !important;
  flex-direction: column !important;
}

.flight-number-main {
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  margin-bottom: 0.125rem !important;
}

.flight-number-details {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
}

/* Compact styles for all elements */
.expense-type-compact, .expense-subtype-compact, .expense-place-compact, .amount-compact, .currency-compact, .period-compact,
.fuel-quantity-compact, .fuel-provider-compact, .invoice-type-compact,
.invoice-number-compact, .flight-number-compact, .invoice-id-compact, 
.flight-id-compact, .comments-compact {
  font-size: 0.8rem !important;
  font-weight: 500 !important;
  color: hsl(210, 6%, 21%) !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  max-width: 100% !important;
}

.comments-info {
  display: flex !important;
  flex-direction: column !important;
  max-width: 200px !important;
}

.comments-main {
  font-weight: 500 !important;
  color: hsl(210, 6%, 21%) !important;
  margin-bottom: 0.125rem !important;
  font-size: 0.8rem !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
}

.comments-details {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
}

/* Modal styles */
.modal-overlay {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  background-color: rgba(0, 0, 0, 0.5) !important;
  display: none !important;
  justify-content: center !important;
  align-items: center !important;
  z-index: 10000 !important;
}

.modal-overlay.show {
  display: flex !important;
}

.modal-container {
  background: white !important;
  border-radius: 0.75rem !important;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
  width: 90% !important;
  max-width: 600px !important;
  max-height: 90vh !important;
  overflow-y: auto !important;
}

.modal-header {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  padding: 1.5rem 1.5rem 0 1.5rem !important;
  border-bottom: 1px solid hsl(210, 11%, 90%) !important;
  margin-bottom: 1.5rem !important;
}

.modal-header h2 {
  margin: 0 !important;
  font-size: 1.25rem !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
}

.modal-close {
  background: none !important;
  border: none !important;
  font-size: 1.25rem !important;
  color: hsl(210, 6%, 46%) !important;
  cursor: pointer !important;
  padding: 0.25rem !important;
  border-radius: 0.25rem !important;
  transition: all 0.2s ease !important;
}

.modal-close:hover {
  background-color: hsl(210, 11%, 95%) !important;
  color: hsl(210, 6%, 21%) !important;
}

.modal-body {
  padding: 0 1.5rem !important;
}

.form-row {
  display: flex !important;
  gap: 1rem !important;
  margin-bottom: 1.25rem !important;
}

.form-group {
  flex: 1 !important;
  margin-bottom: 0 !important;
}

.form-group label {
  display: block !important;
  margin-bottom: 0.5rem !important;
  font-weight: 500 !important;
  color: hsl(210, 6%, 21%) !important;
  font-size: 0.875rem !important;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100% !important;
  padding: 0.75rem !important;
  border: 1px solid hsl(210, 11%, 85%) !important;
  border-radius: 0.5rem !important;
  font-size: 0.875rem !important;
  color: hsl(210, 6%, 21%) !important;
  background-color: white !important;
  transition: border-color 0.2s ease !important;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none !important;
  border-color: hsl(210, 76%, 36%) !important;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
}

.form-group input:valid {
  border-color: hsl(142, 76%, 36%) !important;
}

.modal-actions {
  display: flex !important;
  justify-content: flex-end !important;
  gap: 0.75rem !important;
  margin-top: 2rem !important;
  padding: 1.5rem !important;
  border-top: 1px solid hsl(210, 11%, 90%) !important;
}

.btn {
  padding: 0.75rem 1.5rem !important;
  border-radius: 0.5rem !important;
  font-weight: 500 !important;
  font-size: 0.875rem !important;
  border: none !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  display: inline-flex !important;
  align-items: center !important;
  gap: 0.5rem !important;
}

.btn:disabled {
  opacity: 0.6 !important;
  cursor: not-allowed !important;
}

.btn-cancel {
  background-color: hsl(0, 84%, 60%) !important;
  color: white !important;
}

.btn-cancel:hover:not(:disabled) {
  background-color: hsl(0, 84%, 55%) !important;
}

.btn-save {
  background-color: hsl(142, 76%, 36%) !important;
  color: white !important;
}

.btn-save:hover:not(:disabled) {
  background-color: hsl(142, 76%, 32%) !important;
}

.btn-spinner {
  animation: spin 1s linear infinite !important;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Responsive design */
@media (max-width: 640px) {
  .modal-container {
    width: 95% !important;
    margin: 1rem !important;
  }
  
  .modal-header {
    padding: 1rem 1rem 0 1rem !important;
  }
  
  .modal-body {
    padding: 0 1rem !important;
  }
  
  .form-row {
    flex-direction: column !important;
    gap: 0 !important;
  }
  
  .modal-actions {
    flex-direction: column !important;
  }
  
  .btn {
    width: 100% !important;
    justify-content: center !important;
  }
}
</style>
