<!-- Page Header -->
<div class="page-header">
  <div>
    <h1 class="page-title"><%= invoice.inv_number %> details</h1>
    <p class="page-description">
      <%= new Date(invoice.inv_date).toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      }) %>
    </p>
    <div id="expenses-summary" class="expenses-summary">
      <!-- Expenses summary will be loaded here -->
    </div>
  </div>
  <div class="page-actions">
    <button class="btn btn-secondary" id="backBtn">
      <i class="bi bi-arrow-left"></i>
      Back to Invoices
    </button>
    <button class="btn btn-status" id="statusBtn" data-status="<%= invoice.inv_filled %>">
      <span class="status-text"><%= invoice.inv_filled ? 'Completed' : 'In Progress' %></span>
    </button>
    <button class="btn btn-primary" id="addExpenseBtn">
      <i class="bi bi-plus-lg"></i>
      Add Expense
    </button>
  </div>
</div>

<!-- Content Area -->
<div class="content-area">
  <div class="content-card">
    <div class="content-header">
    </div>
    <div class="content-body">
      <div id="expenses-container">
        <!-- Expenses will be loaded here -->
        <div class="loading-state">
          <div class="loading-spinner">
            <i class="bi bi-arrow-clockwise"></i>
          </div>
          <p>Loading expenses...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Expense Modal -->
<div class="modal-overlay" id="addExpenseModal" style="display: none;">
  <div class="modal-container">
    <div class="modal-header">
      <h2>Add New Expense</h2>
      <button class="modal-close" id="closeExpenseModalBtn">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    
    <form id="addExpenseForm">
      <div class="modal-body">
        <div class="form-row">
          <div class="form-group">
            <label for="expType">Type</label>
            <select id="expType" name="exp_type" required>
              <option value="">Select Type</option>
            </select>
          </div>
          <div class="form-group">
            <label for="expSubtype">Subtype</label>
            <select id="expSubtype" name="exp_subtype">
              <option value="">Select Subtype</option>
            </select>
          </div>
          <div class="form-group">
            <label for="expPlace">Place</label>
            <input type="text" id="expPlace" name="exp_place" placeholder="Enter place">
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="expAmount">Amount</label>
            <input type="number" id="expAmount" name="exp_amount" step="0.01" placeholder="0.00">
          </div>
          <div class="form-group">
            <label for="expCurrency">Currency</label>
            <select id="expCurrency" name="exp_currency">
              <option value="AED" selected>AED</option>
              <option value="USD">USD</option>
              <option value="EUR">EUR</option>
            </select>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="expFuelQuan">Fuel Quantity (L)</label>
            <input type="number" id="expFuelQuan" name="exp_fuel_quan" step="0.01" placeholder="0.00">
          </div>
          <div class="form-group">
            <label for="expFuelProvider">Fuel Provider</label>
            <input type="text" id="expFuelProvider" name="exp_fuel_provider" placeholder="Enter fuel provider">
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="expPeriodStart">Period Start</label>
            <input type="month" id="expPeriodStart" name="exp_period_start">
          </div>
          <div class="form-group">
            <label for="expPeriodEnd">Period End</label>
            <input type="month" id="expPeriodEnd" name="exp_period_end">
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="expInvoiceType">Invoice Type</label>
            <select id="expInvoiceType" name="exp_invoice_type">
              <option value="">Select Invoice Type</option>
            </select>
          </div>
          <div class="form-group">
            <label for="expFlight">Flight</label>
            <select id="expFlight" name="exp_flight">
              <option value="">Select Flight (Optional)</option>
            </select>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group full-width">
            <label for="expComments">Comments</label>
            <textarea id="expComments" name="exp_comments" rows="3" placeholder="Enter comments"></textarea>
          </div>
        </div>
      </div>
      
      <div class="modal-actions">
        <button type="button" class="btn btn-cancel" id="cancelExpenseBtn">
          Cancel
        </button>
        <button type="submit" class="btn btn-save" id="saveExpenseBtn">
          <span class="btn-text">Save</span>
          <div class="spinner" style="display: none;">
            <i class="bi bi-arrow-clockwise"></i>
          </div>
        </button>
      </div>
    </form>
  </div>
</div>

<script>
// Toggle section visibility
function toggleSection(sectionId) {
  const content = document.getElementById(`content-${sectionId}`);
  const toggle = document.getElementById(`toggle-${sectionId}`);
  
  if (content && toggle) {
    const isCollapsed = content.style.display === 'none';
    
    if (isCollapsed) {
      // Expand section
      content.style.display = 'block';
      toggle.classList.remove('bi-chevron-right');
      toggle.classList.add('bi-chevron-down');
    } else {
      // Collapse section
      content.style.display = 'none';
      toggle.classList.remove('bi-chevron-down');
      toggle.classList.add('bi-chevron-right');
    }
  }
}

// Load expenses for this invoice
async function loadExpenses() {
  try {
    const invoiceId = window.location.pathname.split('/').pop();
    const response = await fetch(`/api/invoices/${invoiceId}/expenses`);
    const expenses = await response.json();
    
    const container = document.getElementById('expenses-container');
    const summaryContainer = document.getElementById('expenses-summary');
    
    if (!expenses || expenses.length === 0) {
      container.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">
            <i class="bi bi-receipt"></i>
          </div>
          <h3>No Expenses</h3>
          <p>No expenses found for this invoice.</p>
        </div>
      `;
      // Get invoice data from the page
      const invoiceData = {
        inv_currency: '<%= invoice.inv_currency %>',
        inv_amount: '<%= invoice.inv_amount %>'
      };
      
      summaryContainer.innerHTML = `
        <div class="summary-item">Total: $0.00 USD / 0.00 AED</div>
        <div class="summary-item invoice-amount">
          Invoice: ${invoiceData.inv_currency} ${parseFloat(invoiceData.inv_amount).toLocaleString('en-US', { 
            minimumFractionDigits: 2, 
            maximumFractionDigits: 2 
          })}
        </div>
      `;
      return;
    }

    // Calculate totals
    const exchangeRate = 3.6735;
    let totalUSD = 0;
    let totalAED = 0;
    
    expenses.forEach(expense => {
      if (expense.exp_amount) {
        if (expense.exp_currency === 'USD') {
          totalUSD += parseFloat(expense.exp_amount);
        } else if (expense.exp_currency === 'AED') {
          totalAED += parseFloat(expense.exp_amount);
        }
      }
    });
    
    // Convert AED to USD for total
    const totalUSDConverted = totalUSD + (totalAED / exchangeRate);
    
    // Get invoice data from the page
    const invoiceData = {
      inv_currency: '<%= invoice.inv_currency %>',
      inv_amount: '<%= invoice.inv_amount %>'
    };
    
    // Update summary
    summaryContainer.innerHTML = `
      <div class="summary-item">
        <strong>Total: $${totalUSDConverted.toLocaleString('en-US', { 
          minimumFractionDigits: 2, 
          maximumFractionDigits: 2 
        })} USD / ${totalAED.toLocaleString('en-US', { 
          minimumFractionDigits: 2, 
          maximumFractionDigits: 2 
        })} AED</strong>
      </div>
      <div class="summary-item invoice-amount">
        Invoice: ${invoiceData.inv_currency} ${parseFloat(invoiceData.inv_amount).toLocaleString('en-US', { 
          minimumFractionDigits: 2, 
          maximumFractionDigits: 2 
        })}
      </div>
    `;
    
    // Group expenses by exp_invoice_type
    const groupedExpenses = {};
    expenses.forEach(expense => {
      const type = expense.exp_invoice_type || 'Other';
      if (!groupedExpenses[type]) {
        groupedExpenses[type] = [];
      }
      groupedExpenses[type].push(expense);
    });
    
    // Create HTML for grouped expenses
    let html = '';
    Object.keys(groupedExpenses).sort().forEach(type => {
      const typeExpenses = groupedExpenses[type];
      
      // Calculate total for this type
      let typeTotalUSD = 0;
      let typeTotalAED = 0;
      
      typeExpenses.forEach(expense => {
        if (expense.exp_amount) {
          if (expense.exp_currency === 'USD') {
            typeTotalUSD += parseFloat(expense.exp_amount);
          } else if (expense.exp_currency === 'AED') {
            typeTotalAED += parseFloat(expense.exp_amount);
          }
        }
      });
      
      const typeTotalUSDConverted = typeTotalUSD + (typeTotalAED / exchangeRate);
      
      const sectionId = type.replace(/[^a-zA-Z0-9]/g, '_');
      html += `
        <div class="expense-section">
          <div class="section-header" data-section-id="${sectionId}">
            <h4>${type}</h4>
            <div class="section-controls">
              <span class="section-total">$${typeTotalUSDConverted.toFixed(2)} USD / ${typeTotalAED.toFixed(2)} AED</span>
              <span class="section-count">${typeExpenses.length} items</span>
              <i class="bi bi-chevron-right section-toggle" id="toggle-${sectionId}"></i>
            </div>
          </div>
          <div class="table-container" id="content-${sectionId}" style="display: none;">
            <table class="expenses-table">
              <thead>
                <tr>
                  <th class="group-header">Type</th>
                  <th class="group-header">Subtype</th>
                  <th class="group-header">Description</th>
                  <th>Amount</th>
                  <th>Place</th>
                  <th>Period</th>
                  <th>Fuel Quantity</th>
                  <th>Fuel Provider</th>
                </tr>
              </thead>
              <tbody>
      `;
      
      typeExpenses.forEach(expense => {
        const fuelQty = expense.exp_fuel_quan ? `${expense.exp_fuel_quan}L` : '-';
        const fuelProvider = expense.exp_fuel_provider || '-';
        const comments = expense.exp_comments || '-';
        const amount = expense.exp_amount && expense.exp_currency 
          ? `${expense.exp_amount} ${expense.exp_currency}` 
          : (expense.exp_amount || '-');
        const place = expense.exp_place || '-';
        
        // Format period
        let period = '-';
        if (expense.exp_period_start && expense.exp_period_end) {
          const startDate = new Date(expense.exp_period_start).toLocaleDateString('en-GB', { 
            month: 'short', 
            year: 'numeric' 
          });
          const endDate = new Date(expense.exp_period_end).toLocaleDateString('en-GB', { 
            month: 'short', 
            year: 'numeric' 
          });
          period = startDate === endDate ? startDate : `${startDate} - ${endDate}`;
        }
        
        html += `
          <tr>
            <td class="group-cell">
              <div class="expense-type">${expense.exp_type || '-'}</div>
            </td>
            <td class="group-cell">
              <div class="expense-subtype">${expense.exp_subtype || '-'}</div>
            </td>
            <td class="group-cell">
              <div class="expense-description">${comments}</div>
            </td>
            <td>
              <div class="expense-amount">${amount}</div>
            </td>
            <td>
              <div class="expense-place">${place}</div>
            </td>
            <td>
              <div class="expense-period">${period}</div>
            </td>
            <td>
              <div class="expense-fuel-qty">${fuelQty}</div>
            </td>
            <td>
              <div class="expense-fuel-provider">${fuelProvider}</div>
            </td>
          </tr>
        `;
      });
      
      html += `
              </tbody>
            </table>
          </div>
        </div>
      `;
    });
    
    container.innerHTML = html;
    
    // Add event listeners for section headers
    const sectionHeaders = container.querySelectorAll('.section-header');
    sectionHeaders.forEach(header => {
      header.addEventListener('click', function() {
        const sectionId = this.getAttribute('data-section-id');
        toggleSection(sectionId);
      });
    });
  } catch (error) {
    console.error('Error loading expenses:', error);
    const container = document.getElementById('expenses-container');
    container.innerHTML = `
      <div class="error-state">
        <div class="error-icon">
          <i class="bi bi-exclamation-triangle"></i>
        </div>
        <h3>Error Loading Expenses</h3>
        <p>Failed to load expenses. Please try again.</p>
      </div>
    `;
  }
}

// Load expense types for dropdown
async function loadExpenseTypes() {
  try {
    const response = await fetch('/api/expense-types');
    const types = await response.json();
    
    const select = document.getElementById('expType');
    select.innerHTML = '<option value="">Select Type</option>';
    
    types.forEach(type => {
      const option = document.createElement('option');
      option.value = type.id;
      option.textContent = type.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading expense types:', error);
  }
}

// Load expense subtypes based on selected type
async function loadExpenseSubtypes(typeId) {
  try {
    const select = document.getElementById('expSubtype');
    select.innerHTML = '<option value="">Select Subtype</option>';
    
    if (!typeId) {
      return;
    }
    
    const response = await fetch(`/api/expense-subtypes/${typeId}`);
    const subtypes = await response.json();
    
    subtypes.forEach(subtype => {
      const option = document.createElement('option');
      option.value = subtype.id;
      option.textContent = subtype.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading expense subtypes:', error);
  }
}

// Load invoice types for dropdown
async function loadInvoiceTypes() {
  try {
    const response = await fetch('/api/invoice-types');
    const types = await response.json();
    
    const select = document.getElementById('expInvoiceType');
    select.innerHTML = '<option value="">Select Invoice Type</option>';
    
    types.forEach(type => {
      const option = document.createElement('option');
      option.value = type.id;
      option.textContent = type.name;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading invoice types:', error);
  }
}

// Load flights for dropdown
async function loadFlightsForDropdown() {
  try {
    const response = await fetch('/api/flights');
    const flights = await response.json();
    
    const select = document.getElementById('expFlight');
    select.innerHTML = '<option value="">Select Flight (Optional)</option>';
    
    // Sort flights by date (newest first)
    const sortedFlights = flights.sort((a, b) => {
      const dateA = new Date(a.flt_date);
      const dateB = new Date(b.flt_date);
      return dateB - dateA; // Newest first
    });
    
    sortedFlights.forEach(flight => {
      const option = document.createElement('option');
      option.value = flight.id;
      
      // Format date for display
      const flightDate = new Date(flight.flt_date);
      const formattedDate = flightDate.toLocaleDateString('en-GB', {
        day: '2-digit',
        month: 'short',
        year: 'numeric'
      });
      
      option.textContent = `${flight.flt_number} - ${flight.flt_dep} to ${flight.flt_arr} (${formattedDate})`;
      select.appendChild(option);
    });
  } catch (error) {
    console.error('Error loading flights for dropdown:', error);
  }
}

// Modal functions
function openAddExpenseModal() {
  const modal = document.getElementById('addExpenseModal');
  if (modal) {
    modal.classList.add('show');
    // Load dropdowns when modal opens
    loadExpenseTypes();
    loadInvoiceTypes();
    loadFlightsForDropdown();
  }
}

function closeAddExpenseModal() {
  const modal = document.getElementById('addExpenseModal');
  if (modal) {
    modal.classList.remove('show');
    // Reset form
    document.getElementById('addExpenseForm').reset();
    
    // Reset button state
    const saveBtn = document.getElementById('saveExpenseBtn');
    if (saveBtn) {
      const btnText = saveBtn.querySelector('.btn-text');
      const spinner = saveBtn.querySelector('.spinner');
      
      saveBtn.disabled = false;
      if (btnText) btnText.style.display = 'inline';
      if (spinner) spinner.style.display = 'none';
    }
  }
}

// Toggle invoice status
async function toggleInvoiceStatus() {
  const statusBtn = document.getElementById('statusBtn');
  const currentStatus = statusBtn.getAttribute('data-status') === 'true';
  const newStatus = !currentStatus;
  const invoiceId = window.location.pathname.split('/').pop();
  
  try {
    const response = await fetch(`/api/invoices/${invoiceId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inv_filled: newStatus
      }),
    });
    
    if (response.ok) {
      // Update button appearance and data
      statusBtn.setAttribute('data-status', newStatus);
      const statusText = statusBtn.querySelector('.status-text');
      
      if (newStatus) {
        statusBtn.className = 'btn btn-status completed';
        statusText.textContent = 'Completed';
      } else {
        statusBtn.className = 'btn btn-status in-progress';
        statusText.textContent = 'In Progress';
      }
    } else {
      console.error('Failed to update invoice status');
      alert('Failed to update invoice status. Please try again.');
    }
  } catch (error) {
    console.error('Error updating invoice status:', error);
    alert('Error updating invoice status. Please try again.');
  }
}

document.addEventListener('DOMContentLoaded', function() {
  const backBtn = document.getElementById('backBtn');
  if (backBtn) {
    backBtn.addEventListener('click', function() {
      window.location.href = '/invoices';
    });
  }
  
  // Status button handler
  const statusBtn = document.getElementById('statusBtn');
  if (statusBtn) {
    // Set initial button class based on status
    const isCompleted = statusBtn.getAttribute('data-status') === 'true';
    if (isCompleted) {
      statusBtn.className = 'btn btn-status completed';
    } else {
      statusBtn.className = 'btn btn-status in-progress';
    }
    
    statusBtn.addEventListener('click', toggleInvoiceStatus);
  }
  
  // Add expense button
  const addExpenseBtn = document.getElementById('addExpenseBtn');
  if (addExpenseBtn) {
    addExpenseBtn.addEventListener('click', openAddExpenseModal);
  }
  
  // Expense type change handler
  const expTypeSelect = document.getElementById('expType');
  if (expTypeSelect) {
    expTypeSelect.addEventListener('change', function() {
      loadExpenseSubtypes(this.value);
    });
  }
  
  // Modal close buttons
  const closeExpenseModalBtn = document.getElementById('closeExpenseModalBtn');
  if (closeExpenseModalBtn) {
    closeExpenseModalBtn.addEventListener('click', closeAddExpenseModal);
  }
  
  const cancelExpenseBtn = document.getElementById('cancelExpenseBtn');
  if (cancelExpenseBtn) {
    cancelExpenseBtn.addEventListener('click', closeAddExpenseModal);
  }
  
  // Form submission
  const addExpenseForm = document.getElementById('addExpenseForm');
  if (addExpenseForm) {
    addExpenseForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const saveBtn = document.getElementById('saveExpenseBtn');
      const btnText = saveBtn.querySelector('.btn-text');
      const spinner = saveBtn.querySelector('.spinner');
      
      // Show loading state
      saveBtn.disabled = true;
      btnText.style.display = 'none';
      spinner.style.display = 'inline-block';
      
      let response = null;
      try {
        const formData = new FormData(addExpenseForm);
        const data = Object.fromEntries(formData.entries());
        
        // Get current invoice ID from URL
        const invoiceId = window.location.pathname.split('/').pop();
        data.exp_invoice = invoiceId; // Automatically set the invoice ID
        
        // Convert empty strings to null for optional fields
        Object.keys(data).forEach(key => {
          if (data[key] === '') {
            data[key] = null;
          }
        });
        
        response = await fetch('/api/expenses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        
        const result = await response.json();
        
        if (response.ok) {
          // Success - reload expenses (modal will be closed in finally block)
          loadExpenses(); // Reload the expenses list
        } else {
          // Error - show message
          alert('Error adding expense: ' + (result.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error submitting expense:', error);
        alert('Error adding expense. Please try again.');
      } finally {
        // Reset button state and close modal
        saveBtn.disabled = false;
        btnText.style.display = 'inline';
        spinner.style.display = 'none';
        
        // Close modal after successful submission
        if (response && response.ok) {
          closeAddExpenseModal();
        }
      }
    });
  }
  
  // Load expenses when page loads
  loadExpenses();
});
</script>

<style>
/* Page header styles */
.page-header {
  display: flex !important;
  justify-content: space-between !important;
  align-items: flex-start !important;
  margin-bottom: 2rem !important;
  padding-bottom: 1rem !important;
  border-bottom: 1px solid hsl(210, 11%, 90%) !important;
}

.page-actions {
  display: flex !important;
  gap: 0.75rem !important;
  align-items: center !important;
}

.btn {
  display: inline-flex !important;
  align-items: center !important;
  gap: 0.5rem !important;
  padding: 0.75rem 1.5rem !important;
  border-radius: 0.5rem !important;
  font-weight: 500 !important;
  font-size: 0.875rem !important;
  border: none !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  text-decoration: none !important;
}

.btn-primary {
  background-color: hsl(142, 76%, 36%) !important;
  color: white !important;
  border: 1px solid hsl(142, 76%, 36%) !important;
}

.btn-primary:hover {
  background-color: hsl(142, 76%, 32%) !important;
  border-color: hsl(142, 76%, 32%) !important;
}

.btn-secondary {
  background-color: hsl(210, 6%, 93%) !important;
  color: hsl(210, 6%, 21%) !important;
  border: 1px solid hsl(210, 11%, 85%) !important;
}

.btn-secondary:hover {
  background-color: hsl(210, 6%, 88%) !important;
  border-color: hsl(210, 11%, 80%) !important;
}

/* Content area styles */
.content-area {
  margin-top: 2rem !important;
}

.content-card {
  background: white !important;
  border-radius: 0.75rem !important;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06) !important;
  border: 1px solid hsl(210, 11%, 90%) !important;
}

.content-header {
  padding: 0 !important;
  border-bottom: none !important;
  margin-bottom: 0 !important;
}

.content-header h3 {
  margin: 0 0 0.5rem 0 !important;
  font-size: 1.25rem !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
}

.content-subtitle {
  margin: 0 !important;
  font-size: 0.875rem !important;
  color: hsl(210, 6%, 46%) !important;
}

/* Modal styles */
.modal-overlay {
  position: fixed !important;
  top: 0 !important;
  left: 0 !important;
  width: 100% !important;
  height: 100% !important;
  background-color: rgba(0, 0, 0, 0.5) !important;
  display: none !important;
  justify-content: center !important;
  align-items: center !important;
  z-index: 10000 !important;
}

.modal-overlay.show {
  display: flex !important;
}

.modal-container {
  background: white !important;
  border-radius: 0.75rem !important;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
  width: 90% !important;
  max-width: 600px !important;
  max-height: 90vh !important;
  overflow-y: auto !important;
}

.modal-header {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  padding: 1.5rem 1.5rem 0 1.5rem !important;
  border-bottom: 1px solid hsl(210, 11%, 90%) !important;
  margin-bottom: 1.5rem !important;
}

.modal-header h2 {
  margin: 0 !important;
  font-size: 1.25rem !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
}

.modal-close {
  background: none !important;
  border: none !important;
  font-size: 1.25rem !important;
  color: hsl(210, 6%, 46%) !important;
  cursor: pointer !important;
  padding: 0.25rem !important;
  border-radius: 0.25rem !important;
  transition: all 0.2s ease !important;
}

.modal-close:hover {
  background-color: hsl(210, 11%, 95%) !important;
  color: hsl(210, 6%, 21%) !important;
}

.modal-body {
  padding: 0 1.5rem !important;
}

.form-row {
  display: flex !important;
  gap: 1rem !important;
  margin-bottom: 1rem !important;
}

.form-group {
  flex: 1 !important;
}

.form-group.full-width {
  flex: 100% !important;
}

.form-group label {
  display: block !important;
  margin-bottom: 0.5rem !important;
  font-weight: 500 !important;
  color: hsl(210, 6%, 21%) !important;
  font-size: 0.875rem !important;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100% !important;
  padding: 0.75rem !important;
  border: 1px solid hsl(210, 11%, 85%) !important;
  border-radius: 0.5rem !important;
  font-size: 0.875rem !important;
  transition: border-color 0.2s ease !important;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none !important;
  border-color: hsl(142, 76%, 36%) !important;
  box-shadow: 0 0 0 3px rgba(34, 197, 94, 0.1) !important;
}

.modal-actions {
  display: flex !important;
  justify-content: flex-end !important;
  gap: 0.75rem !important;
  padding: 1.5rem !important;
  border-top: 1px solid hsl(210, 11%, 90%) !important;
  margin-top: 1.5rem !important;
}

.btn-cancel {
  background-color: hsl(210, 6%, 93%) !important;
  color: hsl(210, 6%, 21%) !important;
  border: 1px solid hsl(210, 11%, 85%) !important;
}

.btn-cancel:hover {
  background-color: hsl(210, 6%, 88%) !important;
  border-color: hsl(210, 11%, 80%) !important;
}

.btn-save {
  background-color: hsl(142, 76%, 36%) !important;
  color: white !important;
  border: 1px solid hsl(142, 76%, 36%) !important;
  position: relative !important;
}

.btn-save:hover {
  background-color: hsl(142, 76%, 32%) !important;
  border-color: hsl(142, 76%, 32%) !important;
}

.btn-save:disabled {
  background-color: hsl(210, 6%, 88%) !important;
  border-color: hsl(210, 11%, 85%) !important;
  color: hsl(210, 6%, 46%) !important;
  cursor: not-allowed !important;
}

.spinner {
  display: inline-block !important;
  animation: spin 1s linear infinite !important;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Responsive design */
@media (max-width: 768px) {
  .modal-container {
    width: 95% !important;
    margin: 1rem !important;
  }
  
  .form-row {
    flex-direction: column !important;
    gap: 0.5rem !important;
  }
  
  .modal-actions {
    flex-direction: column !important;
  }
  
  .btn {
    width: 100% !important;
    justify-content: center !important;
  }
}
  color: hsl(210, 6%, 46%) !important;
}

.content-body {
  padding: 0 1.5rem 1.5rem 1.5rem !important;
}

/* Loading and empty states */
.loading-state, .empty-state, .error-state {
  text-align: center !important;
  padding: 3rem 2rem !important;
  color: hsl(210, 6%, 46%) !important;
}

.loading-spinner, .empty-icon, .error-icon {
  font-size: 3rem !important;
  color: hsl(210, 6%, 70%) !important;
  margin-bottom: 1rem !important;
}

.loading-spinner {
  animation: spin 1s linear infinite !important;
}

.loading-state h3, .empty-state h3, .error-state h3 {
  font-size: 1.25rem !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  margin-bottom: 0.5rem !important;
}

.loading-state p, .empty-state p, .error-state p {
  font-size: 0.875rem !important;
  color: hsl(210, 6%, 46%) !important;
  margin: 0 !important;
}

/* Expense sections */
.expense-section {
  margin-bottom: 2rem !important;
}

.expense-section:last-child {
  margin-bottom: 0 !important;
}

.section-header {
  display: flex !important;
  justify-content: space-between !important;
  align-items: center !important;
  margin-bottom: 1rem !important;
  padding: 0.75rem 1rem !important;
  padding-bottom: 0.5rem !important;
  border-bottom: 2px solid hsl(142, 76%, 36%) !important;
  cursor: pointer !important;
  border-radius: 0.5rem 0.5rem 0 0 !important;
  transition: all 0.2s ease !important;
  background-color: hsl(210, 11%, 98%) !important;
}

.section-header:hover {
  background-color: hsl(210, 11%, 95%) !important;
}

.section-header h4 {
  margin: 0 !important;
  font-size: 1rem !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
}

.section-controls {
  display: flex !important;
  align-items: center !important;
  gap: 0.75rem !important;
}

.section-count {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
  background-color: hsl(210, 11%, 95%) !important;
  padding: 0.25rem 0.5rem !important;
  border-radius: 0.375rem !important;
}

.section-toggle {
  font-size: 1rem !important;
  color: hsl(210, 6%, 46%) !important;
  transition: transform 0.2s ease !important;
}

.section-toggle.rotated {
  transform: rotate(180deg) !important;
}

/* Expenses table */
.expenses-table {
  width: 100% !important;
  border-collapse: collapse !important;
  font-size: 0.875rem !important;
  background: white !important;
  border-radius: 0.5rem !important;
  overflow: hidden !important;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1) !important;
}

.expenses-table thead {
  background-color: hsl(210, 11%, 95%) !important;
}

.expenses-table th {
  padding: 0.75rem 1rem !important;
  text-align: left !important;
  font-weight: 600 !important;
  color: hsl(210, 6%, 21%) !important;
  border-bottom: 1px solid hsl(210, 11%, 90%) !important;
  font-size: 0.75rem !important;
  text-transform: uppercase !important;
  letter-spacing: 0.05em !important;
}

/* Group header styling - pastel colors */
.expenses-table th.group-header {
  background-color: hsl(200, 50%, 90%) !important;
  color: hsl(200, 50%, 30%) !important;
  border-right: 1px solid hsl(200, 50%, 85%) !important;
}

.expenses-table th.group-header:last-of-type {
  border-right: none !important;
}

.expenses-table td {
  padding: 0.75rem 1rem !important;
  border-bottom: 1px solid hsl(210, 11%, 95%) !important;
  vertical-align: top !important;
}

.expenses-table tbody tr:hover {
  background-color: hsl(210, 11%, 98%) !important;
}

.expenses-table tbody tr:last-child td {
  border-bottom: none !important;
}

/* Table cell content */
.expense-type, .expense-subtype, .expense-description,
.expense-place, .expense-amount, .expense-fuel-qty, 
.expense-fuel-provider, .expense-period {
  font-size: 0.875rem !important;
  color: hsl(210, 6%, 21%) !important;
  word-break: break-word !important;
}

/* Group cell styling - pastel background */
.expenses-table td.group-cell {
  background-color: hsl(200, 50%, 95%) !important;
  border-right: 1px solid hsl(200, 50%, 90%) !important;
}

.expenses-table td.group-cell:last-of-type {
  border-right: none !important;
}

.expense-amount {
  font-weight: 500 !important;
  color: hsl(142, 76%, 36%) !important;
}

.expense-period {
  font-size: 0.75rem !important;
  color: hsl(210, 6%, 46%) !important;
}

.expense-description {
  max-width: 200px !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
}

/* Responsive design */
@media (max-width: 640px) {
  .page-header {
    flex-direction: column !important;
    gap: 1rem !important;
    align-items: stretch !important;
  }
  
  .page-actions {
    justify-content: flex-start !important;
  }
  
  .content-body {
    padding: 1.5rem !important;
  }
  
  .placeholder-content {
    padding: 2rem 1rem !important;
  }
}

/* Expenses summary styles */
.expenses-summary {
  margin-top: 0.5rem !important;
}

.summary-item {
  font-size: 0.9rem !important;
  color: hsl(210, 6%, 46%) !important;
  background-color: hsl(210, 11%, 95%) !important;
  padding: 0.5rem 0.75rem !important;
  border-radius: 0.375rem !important;
  display: block !important;
  margin-bottom: 0.5rem !important;
}

.summary-item:last-child {
  margin-bottom: 0 !important;
}

.invoice-amount {
  background-color: hsl(142, 76%, 95%) !important;
  color: hsl(142, 76%, 36%) !important;
  font-weight: 500 !important;
}

/* Status button styles */
.btn-status {
  padding: 0.375rem 0.75rem !important;
  border-radius: 0.375rem !important;
  font-size: 0.8rem !important;
  font-weight: 500 !important;
  border: none !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  text-transform: uppercase !important;
  letter-spacing: 0.025em !important;
  min-width: 100px !important;
  height: 32px !important;
}

.btn-status.in-progress {
  background-color: hsl(0, 84%, 60%) !important;
  color: white !important;
}

.btn-status.in-progress:hover {
  background-color: hsl(0, 84%, 55%) !important;
}

.btn-status.completed {
  background-color: hsl(142, 76%, 36%) !important;
  color: white !important;
}

.btn-status.completed:hover {
  background-color: hsl(142, 76%, 32%) !important;
}

/* Section total styles */
.section-total {
  font-size: 0.75rem !important;
  color: hsl(142, 76%, 36%) !important;
  background-color: hsl(142, 76%, 95%) !important;
  padding: 0.25rem 0.5rem !important;
  border-radius: 0.375rem !important;
  font-weight: 600 !important;
  margin-right: 0.5rem !important;
}


/* Page actions button styles - make all buttons same size */
.page-actions .btn {
  padding: 0.375rem 0.75rem !important;
  font-size: 0.8rem !important;
  height: 32px !important;
  min-width: 100px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  gap: 0.375rem !important;
}
</style>
